/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from './common';

export declare namespace SigningCoordinator {
  export type SigningCohortParticipantStruct = {
    provider: string;
    operator: string;
    signature: BytesLike;
  };

  export type SigningCohortParticipantStructOutput = [
    string,
    string,
    string,
  ] & { provider: string; operator: string; signature: string };
}

export interface SigningCoordinatorInterface extends utils.Interface {
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'INITIATOR_ROLE()': FunctionFragment;
    'acceptDefaultAdminTransfer()': FunctionFragment;
    'application()': FunctionFragment;
    'beginDefaultAdminTransfer(address)': FunctionFragment;
    'cancelDefaultAdminTransfer()': FunctionFragment;
    'changeDefaultAdminDelay(uint48)': FunctionFragment;
    'defaultAdmin()': FunctionFragment;
    'defaultAdminDelay()': FunctionFragment;
    'defaultAdminDelayIncreaseWait()': FunctionFragment;
    'deployAdditionalChainForSigningMultisig(uint256,uint32)': FunctionFragment;
    'getChains(uint32)': FunctionFragment;
    'getCondition(uint32,uint256)': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'getSigner(uint32,address)': FunctionFragment;
    'getSigners(uint32)': FunctionFragment;
    'getSigningCohortConditions(uint32,uint256)': FunctionFragment;
    'getSigningCohortDataHash(uint32)': FunctionFragment;
    'getSigningCohortState(uint32)': FunctionFragment;
    'getSigningCoordinatorChild(uint256)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'initialize(uint32,uint16,address,address)': FunctionFragment;
    'initiateSigningCohort(uint256,address,address[],uint16,uint32)': FunctionFragment;
    'isCohortActive(uint32)': FunctionFragment;
    'isSigner(uint32,address)': FunctionFragment;
    'maxCohortSize()': FunctionFragment;
    'numberOfSigningCohorts()': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingDefaultAdmin()': FunctionFragment;
    'pendingDefaultAdminDelay()': FunctionFragment;
    'postSigningCohortSignature(uint32,bytes)': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'rollbackDefaultAdminDelay()': FunctionFragment;
    'setDispatcher(address)': FunctionFragment;
    'setMaxDkgSize(uint16)': FunctionFragment;
    'setSigningCohortConditions(uint32,uint256,bytes)': FunctionFragment;
    'setTimeout(uint32)': FunctionFragment;
    'signingCohorts(uint32)': FunctionFragment;
    'signingCoordinatorDispatcher()': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'timeout()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DEFAULT_ADMIN_ROLE'
      | 'INITIATOR_ROLE'
      | 'acceptDefaultAdminTransfer'
      | 'application'
      | 'beginDefaultAdminTransfer'
      | 'cancelDefaultAdminTransfer'
      | 'changeDefaultAdminDelay'
      | 'defaultAdmin'
      | 'defaultAdminDelay'
      | 'defaultAdminDelayIncreaseWait'
      | 'deployAdditionalChainForSigningMultisig'
      | 'getChains'
      | 'getCondition'
      | 'getRoleAdmin'
      | 'getSigner'
      | 'getSigners'
      | 'getSigningCohortConditions'
      | 'getSigningCohortDataHash'
      | 'getSigningCohortState'
      | 'getSigningCoordinatorChild'
      | 'grantRole'
      | 'hasRole'
      | 'initialize'
      | 'initiateSigningCohort'
      | 'isCohortActive'
      | 'isSigner'
      | 'maxCohortSize'
      | 'numberOfSigningCohorts'
      | 'owner'
      | 'pendingDefaultAdmin'
      | 'pendingDefaultAdminDelay'
      | 'postSigningCohortSignature'
      | 'renounceRole'
      | 'revokeRole'
      | 'rollbackDefaultAdminDelay'
      | 'setDispatcher'
      | 'setMaxDkgSize'
      | 'setSigningCohortConditions'
      | 'setTimeout'
      | 'signingCohorts'
      | 'signingCoordinatorDispatcher'
      | 'supportsInterface'
      | 'timeout',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'INITIATOR_ROLE',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'acceptDefaultAdminTransfer',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'application',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'beginDefaultAdminTransfer',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'cancelDefaultAdminTransfer',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'changeDefaultAdminDelay',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'defaultAdmin',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'defaultAdminDelay',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'defaultAdminDelayIncreaseWait',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'deployAdditionalChainForSigningMultisig',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getChains',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getCondition',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getRoleAdmin',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'getSigner',
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getSigners',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getSigningCohortConditions',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getSigningCohortDataHash',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getSigningCohortState',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getSigningCoordinatorChild',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'hasRole',
    values: [BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [BigNumberish, BigNumberish, string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'initiateSigningCohort',
    values: [BigNumberish, string, string[], BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'isCohortActive',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'isSigner',
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'maxCohortSize',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'numberOfSigningCohorts',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'pendingDefaultAdmin',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'pendingDefaultAdminDelay',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'postSigningCohortSignature',
    values: [BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'rollbackDefaultAdminDelay',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'setDispatcher',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setMaxDkgSize',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setSigningCohortConditions',
    values: [BigNumberish, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setTimeout',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'signingCohorts',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'signingCoordinatorDispatcher',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'timeout', values?: undefined): string;

  decodeFunctionResult(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'INITIATOR_ROLE',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'acceptDefaultAdminTransfer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'application',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'beginDefaultAdminTransfer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'cancelDefaultAdminTransfer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'changeDefaultAdminDelay',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'defaultAdmin',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'defaultAdminDelay',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'defaultAdminDelayIncreaseWait',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deployAdditionalChainForSigningMultisig',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getChains', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getCondition',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRoleAdmin',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getSigner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSigners', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getSigningCohortConditions',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getSigningCohortDataHash',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getSigningCohortState',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getSigningCoordinatorChild',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'initiateSigningCohort',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isCohortActive',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'isSigner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'maxCohortSize',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'numberOfSigningCohorts',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'pendingDefaultAdmin',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'pendingDefaultAdminDelay',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'postSigningCohortSignature',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceRole',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'rollbackDefaultAdminDelay',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setDispatcher',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setMaxDkgSize',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setSigningCohortConditions',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setTimeout', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'signingCohorts',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'signingCoordinatorDispatcher',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'timeout', data: BytesLike): Result;

  events: {
    'DefaultAdminDelayChangeCanceled()': EventFragment;
    'DefaultAdminDelayChangeScheduled(uint48,uint48)': EventFragment;
    'DefaultAdminTransferCanceled()': EventFragment;
    'DefaultAdminTransferScheduled(address,uint48)': EventFragment;
    'DispatcherChanged(address,address)': EventFragment;
    'Initialized(uint64)': EventFragment;
    'InitiateSigningCohort(uint32,uint256,address,address[])': EventFragment;
    'MaxCohortSizeChanged(uint16,uint16)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'SigningCohortConditionsSet(uint32,uint256,bytes)': EventFragment;
    'SigningCohortDeployed(uint32,uint256)': EventFragment;
    'SigningCohortSignaturePosted(uint32,address,bytes)': EventFragment;
    'TimeoutChanged(uint32,uint32)': EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: 'DefaultAdminDelayChangeCanceled',
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'DefaultAdminDelayChangeScheduled',
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'DefaultAdminTransferCanceled',
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'DefaultAdminTransferScheduled',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DispatcherChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InitiateSigningCohort'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaxCohortSizeChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SigningCohortConditionsSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SigningCohortDeployed'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'SigningCohortSignaturePosted',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TimeoutChanged'): EventFragment;
}

export interface DefaultAdminDelayChangeCanceledEventObject {}
export type DefaultAdminDelayChangeCanceledEvent = TypedEvent<
  [],
  DefaultAdminDelayChangeCanceledEventObject
>;

export type DefaultAdminDelayChangeCanceledEventFilter =
  TypedEventFilter<DefaultAdminDelayChangeCanceledEvent>;

export interface DefaultAdminDelayChangeScheduledEventObject {
  newDelay: number;
  effectSchedule: number;
}
export type DefaultAdminDelayChangeScheduledEvent = TypedEvent<
  [number, number],
  DefaultAdminDelayChangeScheduledEventObject
>;

export type DefaultAdminDelayChangeScheduledEventFilter =
  TypedEventFilter<DefaultAdminDelayChangeScheduledEvent>;

export interface DefaultAdminTransferCanceledEventObject {}
export type DefaultAdminTransferCanceledEvent = TypedEvent<
  [],
  DefaultAdminTransferCanceledEventObject
>;

export type DefaultAdminTransferCanceledEventFilter =
  TypedEventFilter<DefaultAdminTransferCanceledEvent>;

export interface DefaultAdminTransferScheduledEventObject {
  newAdmin: string;
  acceptSchedule: number;
}
export type DefaultAdminTransferScheduledEvent = TypedEvent<
  [string, number],
  DefaultAdminTransferScheduledEventObject
>;

export type DefaultAdminTransferScheduledEventFilter =
  TypedEventFilter<DefaultAdminTransferScheduledEvent>;

export interface DispatcherChangedEventObject {
  oldDispatcher: string;
  newDispatcher: string;
}
export type DispatcherChangedEvent = TypedEvent<
  [string, string],
  DispatcherChangedEventObject
>;

export type DispatcherChangedEventFilter =
  TypedEventFilter<DispatcherChangedEvent>;

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface InitiateSigningCohortEventObject {
  cohortId: number;
  chainId: BigNumber;
  authority: string;
  participants: string[];
}
export type InitiateSigningCohortEvent = TypedEvent<
  [number, BigNumber, string, string[]],
  InitiateSigningCohortEventObject
>;

export type InitiateSigningCohortEventFilter =
  TypedEventFilter<InitiateSigningCohortEvent>;

export interface MaxCohortSizeChangedEventObject {
  oldSize: number;
  newSize: number;
}
export type MaxCohortSizeChangedEvent = TypedEvent<
  [number, number],
  MaxCohortSizeChangedEventObject
>;

export type MaxCohortSizeChangedEventFilter =
  TypedEventFilter<MaxCohortSizeChangedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SigningCohortConditionsSetEventObject {
  cohortId: number;
  chainId: BigNumber;
  conditions: string;
}
export type SigningCohortConditionsSetEvent = TypedEvent<
  [number, BigNumber, string],
  SigningCohortConditionsSetEventObject
>;

export type SigningCohortConditionsSetEventFilter =
  TypedEventFilter<SigningCohortConditionsSetEvent>;

export interface SigningCohortDeployedEventObject {
  cohortId: number;
  chainId: BigNumber;
}
export type SigningCohortDeployedEvent = TypedEvent<
  [number, BigNumber],
  SigningCohortDeployedEventObject
>;

export type SigningCohortDeployedEventFilter =
  TypedEventFilter<SigningCohortDeployedEvent>;

export interface SigningCohortSignaturePostedEventObject {
  cohortId: number;
  provider: string;
  signature: string;
}
export type SigningCohortSignaturePostedEvent = TypedEvent<
  [number, string, string],
  SigningCohortSignaturePostedEventObject
>;

export type SigningCohortSignaturePostedEventFilter =
  TypedEventFilter<SigningCohortSignaturePostedEvent>;

export interface TimeoutChangedEventObject {
  oldTimeout: number;
  newTimeout: number;
}
export type TimeoutChangedEvent = TypedEvent<
  [number, number],
  TimeoutChangedEventObject
>;

export type TimeoutChangedEventFilter = TypedEventFilter<TimeoutChangedEvent>;

export interface SigningCoordinator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SigningCoordinatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    INITIATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    acceptDefaultAdminTransfer(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    application(overrides?: CallOverrides): Promise<[string]>;

    beginDefaultAdminTransfer(
      newAdmin: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    cancelDefaultAdminTransfer(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    changeDefaultAdminDelay(
      newDelay: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    defaultAdmin(overrides?: CallOverrides): Promise<[string]>;

    defaultAdminDelay(overrides?: CallOverrides): Promise<[number]>;

    defaultAdminDelayIncreaseWait(overrides?: CallOverrides): Promise<[number]>;

    deployAdditionalChainForSigningMultisig(
      chainId: BigNumberish,
      cohortId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    getChains(
      cohortId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]]>;

    getCondition(
      cohortId: BigNumberish,
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getSigner(
      cohortId: BigNumberish,
      provider: string,
      overrides?: CallOverrides,
    ): Promise<[SigningCoordinator.SigningCohortParticipantStructOutput]>;

    getSigners(
      cohortId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[SigningCoordinator.SigningCohortParticipantStructOutput[]]>;

    getSigningCohortConditions(
      cohortId: BigNumberish,
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getSigningCohortDataHash(
      cohortId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getSigningCohortState(
      cohortId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[number]>;

    getSigningCoordinatorChild(
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    initialize(
      _timeout: BigNumberish,
      _maxDkgSize: BigNumberish,
      _signingCoordinatorDispatcher: string,
      _admin: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    initiateSigningCohort(
      chainId: BigNumberish,
      authority: string,
      providers: string[],
      threshold: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    isCohortActive(
      cohortId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isSigner(
      cohortId: BigNumberish,
      provider: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    maxCohortSize(overrides?: CallOverrides): Promise<[number]>;

    numberOfSigningCohorts(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingDefaultAdmin(
      overrides?: CallOverrides,
    ): Promise<[string, number] & { newAdmin: string; schedule: number }>;

    pendingDefaultAdminDelay(
      overrides?: CallOverrides,
    ): Promise<[number, number] & { newDelay: number; schedule: number }>;

    postSigningCohortSignature(
      cohortId: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    rollbackDefaultAdminDelay(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setDispatcher(
      dispatcher: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setMaxDkgSize(
      newSize: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setSigningCohortConditions(
      cohortId: BigNumberish,
      chainId: BigNumberish,
      conditions: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setTimeout(
      newTimeout: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    signingCohorts(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, number, number, string, number, number, number] & {
        initiator: string;
        initTimestamp: number;
        endTimestamp: number;
        authority: string;
        totalSignatures: number;
        numSigners: number;
        threshold: number;
      }
    >;

    signingCoordinatorDispatcher(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    timeout(overrides?: CallOverrides): Promise<[number]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  INITIATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  acceptDefaultAdminTransfer(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  application(overrides?: CallOverrides): Promise<string>;

  beginDefaultAdminTransfer(
    newAdmin: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  cancelDefaultAdminTransfer(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  changeDefaultAdminDelay(
    newDelay: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  defaultAdmin(overrides?: CallOverrides): Promise<string>;

  defaultAdminDelay(overrides?: CallOverrides): Promise<number>;

  defaultAdminDelayIncreaseWait(overrides?: CallOverrides): Promise<number>;

  deployAdditionalChainForSigningMultisig(
    chainId: BigNumberish,
    cohortId: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  getChains(
    cohortId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  getCondition(
    cohortId: BigNumberish,
    chainId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getSigner(
    cohortId: BigNumberish,
    provider: string,
    overrides?: CallOverrides,
  ): Promise<SigningCoordinator.SigningCohortParticipantStructOutput>;

  getSigners(
    cohortId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<SigningCoordinator.SigningCohortParticipantStructOutput[]>;

  getSigningCohortConditions(
    cohortId: BigNumberish,
    chainId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  getSigningCohortDataHash(
    cohortId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  getSigningCohortState(
    cohortId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<number>;

  getSigningCoordinatorChild(
    chainId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  initialize(
    _timeout: BigNumberish,
    _maxDkgSize: BigNumberish,
    _signingCoordinatorDispatcher: string,
    _admin: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  initiateSigningCohort(
    chainId: BigNumberish,
    authority: string,
    providers: string[],
    threshold: BigNumberish,
    duration: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  isCohortActive(
    cohortId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isSigner(
    cohortId: BigNumberish,
    provider: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  maxCohortSize(overrides?: CallOverrides): Promise<number>;

  numberOfSigningCohorts(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingDefaultAdmin(
    overrides?: CallOverrides,
  ): Promise<[string, number] & { newAdmin: string; schedule: number }>;

  pendingDefaultAdminDelay(
    overrides?: CallOverrides,
  ): Promise<[number, number] & { newDelay: number; schedule: number }>;

  postSigningCohortSignature(
    cohortId: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  rollbackDefaultAdminDelay(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setDispatcher(
    dispatcher: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setMaxDkgSize(
    newSize: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setSigningCohortConditions(
    cohortId: BigNumberish,
    chainId: BigNumberish,
    conditions: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setTimeout(
    newTimeout: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  signingCohorts(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, number, number, string, number, number, number] & {
      initiator: string;
      initTimestamp: number;
      endTimestamp: number;
      authority: string;
      totalSignatures: number;
      numSigners: number;
      threshold: number;
    }
  >;

  signingCoordinatorDispatcher(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  timeout(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    INITIATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    acceptDefaultAdminTransfer(overrides?: CallOverrides): Promise<void>;

    application(overrides?: CallOverrides): Promise<string>;

    beginDefaultAdminTransfer(
      newAdmin: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    cancelDefaultAdminTransfer(overrides?: CallOverrides): Promise<void>;

    changeDefaultAdminDelay(
      newDelay: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    defaultAdmin(overrides?: CallOverrides): Promise<string>;

    defaultAdminDelay(overrides?: CallOverrides): Promise<number>;

    defaultAdminDelayIncreaseWait(overrides?: CallOverrides): Promise<number>;

    deployAdditionalChainForSigningMultisig(
      chainId: BigNumberish,
      cohortId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    getChains(
      cohortId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    getCondition(
      cohortId: BigNumberish,
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getSigner(
      cohortId: BigNumberish,
      provider: string,
      overrides?: CallOverrides,
    ): Promise<SigningCoordinator.SigningCohortParticipantStructOutput>;

    getSigners(
      cohortId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<SigningCoordinator.SigningCohortParticipantStructOutput[]>;

    getSigningCohortConditions(
      cohortId: BigNumberish,
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    getSigningCohortDataHash(
      cohortId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    getSigningCohortState(
      cohortId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<number>;

    getSigningCoordinatorChild(
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    initialize(
      _timeout: BigNumberish,
      _maxDkgSize: BigNumberish,
      _signingCoordinatorDispatcher: string,
      _admin: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    initiateSigningCohort(
      chainId: BigNumberish,
      authority: string,
      providers: string[],
      threshold: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<number>;

    isCohortActive(
      cohortId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isSigner(
      cohortId: BigNumberish,
      provider: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    maxCohortSize(overrides?: CallOverrides): Promise<number>;

    numberOfSigningCohorts(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingDefaultAdmin(
      overrides?: CallOverrides,
    ): Promise<[string, number] & { newAdmin: string; schedule: number }>;

    pendingDefaultAdminDelay(
      overrides?: CallOverrides,
    ): Promise<[number, number] & { newDelay: number; schedule: number }>;

    postSigningCohortSignature(
      cohortId: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    rollbackDefaultAdminDelay(overrides?: CallOverrides): Promise<void>;

    setDispatcher(dispatcher: string, overrides?: CallOverrides): Promise<void>;

    setMaxDkgSize(
      newSize: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setSigningCohortConditions(
      cohortId: BigNumberish,
      chainId: BigNumberish,
      conditions: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    setTimeout(
      newTimeout: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    signingCohorts(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, number, number, string, number, number, number] & {
        initiator: string;
        initTimestamp: number;
        endTimestamp: number;
        authority: string;
        totalSignatures: number;
        numSigners: number;
        threshold: number;
      }
    >;

    signingCoordinatorDispatcher(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    timeout(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    'DefaultAdminDelayChangeCanceled()'(): DefaultAdminDelayChangeCanceledEventFilter;
    DefaultAdminDelayChangeCanceled(): DefaultAdminDelayChangeCanceledEventFilter;

    'DefaultAdminDelayChangeScheduled(uint48,uint48)'(
      newDelay?: null,
      effectSchedule?: null,
    ): DefaultAdminDelayChangeScheduledEventFilter;
    DefaultAdminDelayChangeScheduled(
      newDelay?: null,
      effectSchedule?: null,
    ): DefaultAdminDelayChangeScheduledEventFilter;

    'DefaultAdminTransferCanceled()'(): DefaultAdminTransferCanceledEventFilter;
    DefaultAdminTransferCanceled(): DefaultAdminTransferCanceledEventFilter;

    'DefaultAdminTransferScheduled(address,uint48)'(
      newAdmin?: string | null,
      acceptSchedule?: null,
    ): DefaultAdminTransferScheduledEventFilter;
    DefaultAdminTransferScheduled(
      newAdmin?: string | null,
      acceptSchedule?: null,
    ): DefaultAdminTransferScheduledEventFilter;

    'DispatcherChanged(address,address)'(
      oldDispatcher?: null,
      newDispatcher?: null,
    ): DispatcherChangedEventFilter;
    DispatcherChanged(
      oldDispatcher?: null,
      newDispatcher?: null,
    ): DispatcherChangedEventFilter;

    'Initialized(uint64)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'InitiateSigningCohort(uint32,uint256,address,address[])'(
      cohortId?: BigNumberish | null,
      chainId?: null,
      authority?: string | null,
      participants?: null,
    ): InitiateSigningCohortEventFilter;
    InitiateSigningCohort(
      cohortId?: BigNumberish | null,
      chainId?: null,
      authority?: string | null,
      participants?: null,
    ): InitiateSigningCohortEventFilter;

    'MaxCohortSizeChanged(uint16,uint16)'(
      oldSize?: null,
      newSize?: null,
    ): MaxCohortSizeChangedEventFilter;
    MaxCohortSizeChanged(
      oldSize?: null,
      newSize?: null,
    ): MaxCohortSizeChangedEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter;

    'SigningCohortConditionsSet(uint32,uint256,bytes)'(
      cohortId?: BigNumberish | null,
      chainId?: null,
      conditions?: null,
    ): SigningCohortConditionsSetEventFilter;
    SigningCohortConditionsSet(
      cohortId?: BigNumberish | null,
      chainId?: null,
      conditions?: null,
    ): SigningCohortConditionsSetEventFilter;

    'SigningCohortDeployed(uint32,uint256)'(
      cohortId?: BigNumberish | null,
      chainId?: null,
    ): SigningCohortDeployedEventFilter;
    SigningCohortDeployed(
      cohortId?: BigNumberish | null,
      chainId?: null,
    ): SigningCohortDeployedEventFilter;

    'SigningCohortSignaturePosted(uint32,address,bytes)'(
      cohortId?: BigNumberish | null,
      provider?: string | null,
      signature?: null,
    ): SigningCohortSignaturePostedEventFilter;
    SigningCohortSignaturePosted(
      cohortId?: BigNumberish | null,
      provider?: string | null,
      signature?: null,
    ): SigningCohortSignaturePostedEventFilter;

    'TimeoutChanged(uint32,uint32)'(
      oldTimeout?: null,
      newTimeout?: null,
    ): TimeoutChangedEventFilter;
    TimeoutChanged(
      oldTimeout?: null,
      newTimeout?: null,
    ): TimeoutChangedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    INITIATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptDefaultAdminTransfer(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    application(overrides?: CallOverrides): Promise<BigNumber>;

    beginDefaultAdminTransfer(
      newAdmin: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    cancelDefaultAdminTransfer(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    changeDefaultAdminDelay(
      newDelay: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    defaultAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    defaultAdminDelay(overrides?: CallOverrides): Promise<BigNumber>;

    defaultAdminDelayIncreaseWait(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    deployAdditionalChainForSigningMultisig(
      chainId: BigNumberish,
      cohortId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    getChains(
      cohortId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCondition(
      cohortId: BigNumberish,
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSigner(
      cohortId: BigNumberish,
      provider: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSigners(
      cohortId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSigningCohortConditions(
      cohortId: BigNumberish,
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSigningCohortDataHash(
      cohortId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSigningCohortState(
      cohortId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSigningCoordinatorChild(
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(
      _timeout: BigNumberish,
      _maxDkgSize: BigNumberish,
      _signingCoordinatorDispatcher: string,
      _admin: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    initiateSigningCohort(
      chainId: BigNumberish,
      authority: string,
      providers: string[],
      threshold: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    isCohortActive(
      cohortId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isSigner(
      cohortId: BigNumberish,
      provider: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    maxCohortSize(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfSigningCohorts(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingDefaultAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    pendingDefaultAdminDelay(overrides?: CallOverrides): Promise<BigNumber>;

    postSigningCohortSignature(
      cohortId: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    rollbackDefaultAdminDelay(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setDispatcher(
      dispatcher: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setMaxDkgSize(
      newSize: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setSigningCohortConditions(
      cohortId: BigNumberish,
      chainId: BigNumberish,
      conditions: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setTimeout(
      newTimeout: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    signingCohorts(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    signingCoordinatorDispatcher(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    timeout(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    INITIATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptDefaultAdminTransfer(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    application(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beginDefaultAdminTransfer(
      newAdmin: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    cancelDefaultAdminTransfer(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    changeDefaultAdminDelay(
      newDelay: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    defaultAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultAdminDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultAdminDelayIncreaseWait(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    deployAdditionalChainForSigningMultisig(
      chainId: BigNumberish,
      cohortId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    getChains(
      cohortId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getCondition(
      cohortId: BigNumberish,
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getSigner(
      cohortId: BigNumberish,
      provider: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getSigners(
      cohortId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getSigningCohortConditions(
      cohortId: BigNumberish,
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getSigningCohortDataHash(
      cohortId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getSigningCohortState(
      cohortId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getSigningCoordinatorChild(
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(
      _timeout: BigNumberish,
      _maxDkgSize: BigNumberish,
      _signingCoordinatorDispatcher: string,
      _admin: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    initiateSigningCohort(
      chainId: BigNumberish,
      authority: string,
      providers: string[],
      threshold: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    isCohortActive(
      cohortId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isSigner(
      cohortId: BigNumberish,
      provider: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    maxCohortSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfSigningCohorts(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingDefaultAdmin(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    pendingDefaultAdminDelay(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    postSigningCohortSignature(
      cohortId: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    rollbackDefaultAdminDelay(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setDispatcher(
      dispatcher: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setMaxDkgSize(
      newSize: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setSigningCohortConditions(
      cohortId: BigNumberish,
      chainId: BigNumberish,
      conditions: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setTimeout(
      newTimeout: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    signingCohorts(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    signingCoordinatorDispatcher(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    timeout(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
